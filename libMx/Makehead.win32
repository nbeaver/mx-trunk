#
# Name:    Makehead.win32
#
# Purpose: This file is used to customize operating system and installation
#          dependent features of the MX makefiles.  This version is customized
#          for Microsoft Win32 (Windows 95/98/Me/NT/2000/XP/7).
#
# Normally, the only things that end users may have to modify in this file are
# the definitions of INCLUDES, LIB_DIRS, and LIBRARIES.
#

INCLUDES  = $(MX_INCLUDES)
LIBRARIES = $(WIN32_LIBS)

#INCLUDES = $(MX_INCLUDES) $(ESONE_CAMAC_INCLUDES)
#LIBRARIES = $(WIN32_LIBS) $(JORWAY_CAMAC_LIBS)

#INCLUDES = $(MX_INCLUDES) $(DRIVERLINX_INCLUDES)
#LIBRARIES = $(WIN32_LIBS) $(DRIVERLINX_LIBS)

#INCLUDES = $(MX_INCLUDES) $(PMC_MCAPI_INCLUDES)
#LIBRARIES = $(WIN32_LIBS) $(PMC_MCAPI_LIBS)

#INCLUDES = $(MX_INCLUDES) $(UMCBI_INCLUDES)
#LIBRARIES = $(WIN32_LIBS) $(UMCBI_LIBS)

#INCLUDES = $(MX_INCLUDES) $(DRIVERLINX_INCLUDES) $(PCMOTION32_INCLUDES) \
#		 $(PMC_MCAPI_INCLUDES) $(UMCBI_INCLUDES)
#LIBRARIES = $(WIN32_LIBS) $(DRIVERLINX_LIBS) $(PCMOTION32_LIBS) \
#		$(PMC_MCAPI_LIBS) $(UMCBI_LIBS)

# *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING *** WARNING ***
#
# If you link to third party libraries, you _must_ make sure that you are
# compiling MX to use the same run time libraries, e.g. MSVCRT versus LIBCMT,
# as the third party library is using.  If you do not and there is a mismatch,
# then at best linking your binaries will fail and alert you to the problem.
# However, it is also possible that the executables will seem to build
# correctly, but then occasionally fail in mysterious ways.  Thus, it is
# very important to get this right!
#
# Also, since MX uses threads in a number of places, -ML and -MLd are
# not valid choices and must not be used.

RUN_TIME_LIBRARY_FLAGS = -MD	# dynamically linked MSVCRT
#RUN_TIME_LIBRARY_FLAGS = -MDd	# dynamically linked MSVCRT (debugging version)
#RUN_TIME_LIBRARY_FLAGS = -MT	# statically linked LIBCMT
#RUN_TIME_LIBRARY_FLAGS = -MTd	# statically linked LIBCMT (debugging version)

# # You may also need to modify some of the following definitions, depending
# on the drivers you plan to use.
#

#
# You must specify the directory that Microsoft Visual C++ was installed in.
# The name specified for Gnu Make MUST NOT contain any spaces in it.  That
# is why the examples below use short directory names like progra~1\micros~1 .
#
# In most cases, whatever directory you select for MXDEV_DIR should contain
# a Lib subdirectory which in turn should contain all of the .lib files for
# the Windows DLLs that you plan to use.  The only exception to this rule
# is if you are using a separately downloaded copy of the Win32 Platform SDK.
#

MSDEV_ARCH	= x86
#MSDEV_ARCH	= x64

#MSDEV_ARCH	= x86_vs11
#MSDEV_ARCH	= x64_vs11

#
# Visual C++ 11 Pro (beta)       (_MSC_VER == 1700)
#
# Full name: 'c:\Program Files (x86)\Windows Kits\8.0\Lib\win8\um'
#
#MSDEV_DIR	= c:\\progra~2\\wi3cf2~1\\8.0\\Lib\\win8\\um

#
# Visual C++ 2010 Pro or Express (_MSC_VER == 1600)
#
#MSDEV_DIR	= c:\\progra~1\\micros~1\\Windows\\v7.0A
#MSDEV_DIR	= c:\\progra~1\\micros~2\\Windows\\v7.0A
#MSDEV_DIR	= c:\\progra~1\\micros~3\\Windows\\v7.0A
MSDEV_DIR	= c:\\progra~1\\micros~4\\Windows\\v7.0A
#MSDEV_DIR	= c:\\progra~2\\micros~1\\Windows\\v7.0A
#MSDEV_DIR	= c:\\progra~2\\micros~3\\Windows\\v7.0A
#MSDEV_DIR	= c:\\progra~2\\mia713~1\\Windows\\v7.0A
#MSDEV_DIR	= d:\\progra~1\\micros~3\\Windows\\v7.0A
#
# Visual C++ 2008 Express        (_MSC_VER == 1500)
#   (32-bit mode only)
#
#MSDEV_DIR	= c:\\progra~1\\micros~2\\Windows\\v6.0A
#
# Visual C++ 2005 Express        (_MSC_VER == 1400)
#  (See below at the definition of PLATFORM_SDK)
#
# Visual Studio.NET 2003         (_MSC_VER == 1310)
#
#MSDEV_DIR	= c:\\progra~1\\micros~1.net\\vc7\\PlatformSDK
#
# Visual C++ 6.0                 (_MSC_VER == 1200)
#
#MSDEV_DIR	= c:\\progra~1\\micros~1\\vc98
#MSDEV_DIR	= c:\\progra~1\\micros~2\\vc98
#MSDEV_DIR	= c:\\progra~1\\micros~3\\vc98
#MSDEV_DIR	= d:\\progra~1\\micros~2\\vc98
#
# Visual C++ 5.0                 (_MSC_VER == 1100)
#
#MSDEV_DIR	= c:\\progra~1\\devstudio\\vc
#
# Visual C++ 4.0                 (_MSC_VER == 1000)
#
#MSDEV_DIR	= c:\\msdevstd
#MSDEV_DIR	= c:\\msdev
#

# Visual Studio.NET 2002         (_MSC_VER == 1300)  (Not tested)

#---------------------------------------------------------------------------
#
# If you are using a separately downloaded copy of the Win32 Platform SDK,
# the following is an example of how to have your compiler use that rather
# than the version bundled with the compiler.

# Visual C++ 2008 Express (64-bit mode)
#
# WARNING: You must use a customized version of WIN32_LIBS for 64-bit mode
# which can be found below the normal definition of WIN32_LIBS.

#PLATFORM_SDK = c:\\progra~1\\micros~2\\windows\\v7.0
#PLATFORM_SDK = c:\\progra~1\\micros~4\\windows\\v7.0
PLATFORM_SDK = c:\\progra~1\\mia713~1\\windows\\v7.1

# Visual C++ 2005 Express
#
#PLATFORM_SDK = c:\\progra~1\\mifd68~1
#PLATFORM_SDK = c:\\progra~1\\micros~3
#PLATFORM_SDK = c:\\progra~1\\micros~4

#---------------------------------------------------------------------------

#RUN_TIME_LIBRARY_FLAGS += $(LIBMX_INCLUDES)
#INCLUDES                = -I$(PLATFORM_SDK)\\include $(MX_INCLUDES)
#LIBMX_INCLUDES          = -I$(PLATFORM_SDK)\\include $(MX_INCLUDES)
#MSDEV_DIR               = $(PLATFORM_SDK)

#---------------------------------------------------------------------------
#
# The following definition of WIN32_LIBS can probably be left alone if you
# are creative enough in how you define MSDEV_DIR.
#

ifeq ($(MSDEV_ARCH),x86)
	MSDEV_LIB_DIR = $(MSDEV_DIR)\\lib
endif

ifeq ($(MSDEV_ARCH),x64)
	MSDEV_LIB_DIR = $(MSDEV_DIR)\\lib\\x64
endif

#--

ifeq ($(MSDEV_ARCH),x86_vs11)
	MSDEV_LIB_DIR = $(MSDEV_DIR)\\x86
endif

ifeq ($(MSDEV_ARCH),x64_vs11)
	MSDEV_LIB_DIR = $(MSDEV_DIR)\\x64
endif

#--

WIN32_LIBS	= $(MSDEV_LIB_DIR)\\wsock32.lib \
	$(MSDEV_LIB_DIR)\\winmm.lib \
	$(MSDEV_LIB_DIR)\\advapi32.lib \
	$(MSDEV_LIB_DIR)\\user32.lib \
	$(MSDEV_LIB_DIR)\\gdi32.lib \
	$(MSDEV_LIB_DIR)\\uuid.lib

#---------------------------------------------------------------------------
#
# Visual C++ 2005 and above use "manifest" files to find C runtime library DLLs.
# It is possible to use a "manifest tool" program to embed the contents of
# the manifest file back into the binary file.
#
# Since Cygwin comes with a completely unrelated program that is _also_ called
# 'mt', we must specify the full pathname of the manifest tool to ensure that
# we find the correct one.
#
# The following forest of backticks, backslashes, and double quotes should be
# sufficient to ensure that the final pathname for 'mt' uses forward slashes
# when handed to 'bash' by the Cygwin make program.
#

MSMANIFEST_TOOL = `echo "$(MSDEV_DIR)\\bin\\mt" | tr \\\\ / `

#---------------------------------------------------------------------------
#
# If you want to use the Mpatrol debugging package from 
# http://mpatrol.sourceforge.net, uncomment the following
# statements.
#
#MPATROL_DIR = c:\\docume~1\\lavender\\mpatrol
#
#CFLAGS += -DDEBUG_MPATROL -I$(MPATROL_DIR)\\include
#MPATROL_LIB = $(MPATROL_DIR)\\lib\\mpatrolmt.lib \
#		$(MPATROL_DIR)\\lib\\heapdiff.obj
#DEBUG_OPTS = /force:multiple $(MPATROL_LIB) $(MSDEV_DIR)\\lib\\imagehlp.lib

#---------------------------------------------------------------------------
#
# If you are using the Win32 version of DUMA (duma.sourceforge.net)
# uncomment the following lines.  DUMA is a fork of Electric Fence
# which has been ported to Win32.
#
# WARNING: Make sure that DUMA has been compiled with the same flags
# (-MD, -MDd, -MT, or -MTd) as is being used to compile MX.  The default
# configuration as delivered of DUMA uses -MLd.  -MLd is not supported
# by MX, since the use of the -MLd flag breaks MX's support for threads.
#

#DUMA_DIR = c:\\docume~1\\lavender\\archives\\duma\\duma_2_5_15
#
#CFLAGS += -DDEBUG_DUMA
#DUMA_LIB = $(DUMA_DIR)\\win32-msvc.net\\dumalib\\Release\\dumalib.lib
#DEBUG_OPTS = /force $(DUMA_LIB)

#---------------------------------------------------------------------------
#
# Directory containing the EG&G Ortec UMCBI library and include file.
#

UMCBI_DIR	= c:\\Ortec
UMCBI_INCLUDES	= -I$(UMCBI_DIR)\\lib
UMCBI_LIBS	= $(UMCBI_DIR)\\lib\\Mcbcio32.lib

#---------------------------------------------------------------------------
#
# Precision MicroControl Motion Control API (MCAPI) interface.
#
PMC_MCAPI_DIR        = c:\\progra~1\\motion~1\\motion~1\\sources
PMC_MCAPI_INCLUDES   = -I$(PMC_MCAPI_DIR)
PMC_MCAPI_LIBS       = $(PMC_MCAPI_DIR)\\mcapi32.lib \
			$(PMC_MCAPI_DIR)\\mcdlg32.lib

#---------------------------------------------------------------------------
#
# Jorway CAMAC drivers from Fermilab
#

JORWAY_CAMAC_DIR     = c:\\camac\\jorway\\sjyWIN
JORWAY_CAMAC_LIBS    = $(JORWAY_CAMAC_DIR)\\lib\\sjy73a.lib
ESONE_CAMAC_INCLUDES = -I$(JORWAY_CAMAC_DIR)\\inc

#---------------------------------------------------------------------------
#
# DriverLINX NT Port I/O driver.
#

DRIVERLINX_DIR      = c:\\progra~1\\DLPortIO
DRIVERLINX_INCLUDES = -I$(DRIVERLINX_DIR)\\API
DRIVERLINX_LIBS     = $(DRIVERLINX_DIR)\\API\\DLPORTIO.lib

#---------------------------------------------------------------------------
#
# Directory containing the National Instruments pcMotion32 DLL for the
# ValueMotion series of motor controllers.
#

#PCMOTION32_DIR      = c:\\nuLogic\\pcMotion
#PCMOTION32_INCLUDES = -I$(PCMOTION32_DIR)\\SUPPORT
#PCMOTION32_LIBS     = $(PCMOTION32_DIR)\\SUPPORT\\Microsoft\\pcmotionMS.lib

PCMOTION32_DIR      = c:\\ValueMotion
PCMOTION32_INCLUDES = -I$(PCMOTION32_DIR)\\Include
PCMOTION32_LIBS     = $(PCMOTION32_DIR)\\lib\\Microsoft\\pcmotionMS.lib

#
#========================================================================
#
# Generally, you should not have to modify anything after this point.
#

# Intel x86 with Microsoft Visual C++ under Win32.
#

.SUFFIXES:
.SUFFIXES: .c .obj

.c.obj:
	$(CC) -c $(CFLAGS) $<

CC		= cl
CFLAGS		+= -nologo $(INCLUDES) $(RUN_TIME_LIBRARY_FLAGS) \
			-Zi -WX -DOS_WIN32 $(EXTRA_FLAGS) -DDEBUG
# Special cases for individual files.

CFLAGS_MX_VERS  = -DOS_WIN32 -DMX_MAJOR_VERSION=$(MX_MAJOR_VERSION) \
			-DMX_MINOR_VERSION=$(MX_MINOR_VERSION) \
			-DMX_UPDATE_VERSION=$(MX_UPDATE_VERSION)

COMPILE		= $(CC) -c
DEFINE		= -D
#
# For makedepend, you can use either the Cygwin 'makedepend' command
# or you can use the 'makedepend' from UnxUtils.  UnxUtils can be found
# at http://sourceforge.net/projects/unxutils.
#

MAKEDEPEND       = \
    ( rm Makefile.depend ; \
      makedepend -o.obj -Y -I../libMx -f- [a-l]*.c 2>nul > Makefile.depend ; \
      makedepend -o.obj -Y -I../libMx -f- [m-z]*.c 2>nul >> Makefile.depend )


MAKEDEPEND_CLEAN = rm Makefile.depend

#
#---------------------------------------------------
#

MX_LIB_SRCS = mx_driver.c $(MX_CORE_SRCS) $(MX_DRIVER_SRCS)

#
# See libMx/Makehead.irix for why this is here.
#
MX_LIB_OBJS       = $(MX_LIB_SRCS:.c=.$(OBJ))
MOTOR_OBJS        = $(MOTOR_SRCS:.c=.$(OBJ))
SERVER_OBJS       = $(SERVER_SRCS:.c=.$(OBJ))
AUTOSAVE_OBJS       = $(AUTOSAVE_SRCS:.c=.$(OBJ))
MXDRIVERINFO_OBJS = $(MXDRIVERINFO_SRCS:.c=.$(OBJ))
MXMONITOR_OBJS    = $(MXMONITOR_SRCS:.c=.$(OBJ))

#----

MX_LIB_OBJS += $(MX_LIB_CPP_OBJS)

MX_LIB_OBJS += ..\\tools\\strlcpy.obj ..\\tools\\strlcat.obj
MX_LIB_OBJS += ..\\tools\\strptime.obj
MX_LIB_OBJS += ..\\tools\\xdr.obj ..\\tools\\xdr_hyper.obj
MX_LIB_OBJS += ..\\tools\\getopt.obj
MX_LIB_OBJS += ..\\tools\\smvspatial.obj

#
#---------------------------------------------------
#

RM		= rm
MAKE		= make
TOUCH		= touch -a

OBJ		= obj

EXEOUT		= -Fe
DOTEXE		= .exe

#
MX_LIB_DIR	= ..\\libMx
MX_INC_DIR	= $(MX_LIB_DIR)
MX_INCLUDES	= -I$(MX_INC_DIR)

MX_LIBRARY_PATH	= $(MX_LIB_DIR)\\$(MX_LIBRARY_NAME)

MX_LIBRARY_NAME	= libMx.lib

MX_LIBRARY_STATIC_NAME = $(MX_LIBRARY_NAME)

MX_LIBRARY_DELETE = $(RM) libMx.*

$(MX_LIBRARY_NAME): $(shell echo $(MX_LIB_OBJS) | tr \\\\ / )
	-$(MX_LIBRARY_DELETE)
	link /dll /debug /nologo /out:libMx.dll /nodefaultlib:libc \
			$(DEBUG_OPTS) $(MX_LIB_OBJS) $(LIBRARIES)

	# For VC2005 or later, embed the manifest in the DLL.

	if test -f libMx.dll.manifest; then \
		$(MSMANIFEST_TOOL) -nologo -outputresource:libMx.dll\;2 \
			-manifest libMx.dll.manifest $(EXTRA_MANIFESTS) ; \
		rm -f libMx.dll.manifest; \
	fi

library_install:
	-mkdir $(MX_INSTALL_DIR)/bin
	-mkdir $(MX_INSTALL_DIR)/etc
	-mkdir $(MX_INSTALL_DIR)/etc/startup
	-mkdir $(MX_INSTALL_DIR)/include
	-mkdir $(MX_INSTALL_DIR)/lib
	-mkdir $(MX_INSTALL_DIR)/log
	-mkdir $(MX_INSTALL_DIR)/run
	-mkdir $(MX_INSTALL_DIR)/sbin
	-mkdir $(MX_INSTALL_DIR)/state
	cp mx*.h $(MX_INSTALL_DIR)/include
	cp $(MX_LIBRARY_NAME) $(MX_INSTALL_DIR)/lib
	cp libMx.dll $(MX_INSTALL_DIR)/bin
	touch $(MX_INSTALL_DIR)/etc/motor.dat
	touch $(MX_INSTALL_DIR)/etc/scan.dat
	cp ../plotgnu/plotgnu.pl $(MX_INSTALL_DIR)/bin
	cp ../plotgnu/showdata $(MX_INSTALL_DIR)/bin/showdata.pl
	cp ../plotgnu/showplot $(MX_INSTALL_DIR)/bin/showplot.pl
	cp ../plotgnu/plot2ps $(MX_INSTALL_DIR)/bin/plot2ps.pl
	cp ../plotgnu/*.bat $(MX_INSTALL_DIR)/bin
	cp ../tools/mxgnuplt.exe $(MX_INSTALL_DIR)/bin

#
#---------------------------------------------------
#
MOTOR_NAME	= motor.exe

$(MOTOR_NAME): $(MOTOR_OBJS) motor.res \
		  $(shell echo $(MX_LIBRARY_PATH) | tr \\\\ / )
	link /debug /nologo /out:$(MOTOR_NAME) $(MOTOR_OBJS) motor.res \
		/nodefaultlib:libc $(DEBUG_OPTS) $(MX_LIBRARY_PATH) $(WIN32_LIBS)

	# For VC2005 or later, embed the manifest in the executable.

	if test -f $(MOTOR_NAME).manifest; then \
		$(MSMANIFEST_TOOL) -nologo -outputresource:$(MOTOR_NAME)\;1 \
			-manifest $(MOTOR_NAME).manifest $(EXTRA_MANIFESTS) ; \
		rm -f $(MOTOR_NAME).manifest; \
	fi

motor.res: motor.rc
	rc -i$(MSDEV_DIR)/include motor.rc

motor_install:
	cp $(MOTOR_NAME) $(MX_INSTALL_DIR)/bin

#
#---------------------------------------------------
#
SERVER_NAME	= mxserver.exe

$(SERVER_NAME): $(SERVER_OBJS) mxserver.res \
		  $(shell echo $(MX_LIBRARY_PATH) | tr \\\\ / )
	link /debug /nologo /out:mxserver.exe *.obj mxserver.res \
		/nodefaultlib:libc $(DEBUG_OPTS) \
		$(MX_LIBRARY_PATH) $(WIN32_LIBS)

	# For VC2005 or later, embed the manifest in the executable.

	if test -f $(SERVER_NAME).manifest; then \
		$(MSMANIFEST_TOOL) -nologo -outputresource:$(SERVER_NAME)\;1 \
			-manifest $(SERVER_NAME).manifest $(EXTRA_MANIFESTS) ; \
		rm -f $(SERVER_NAME).manifest; \
	fi

mxserver.res: mxserver.rc
	rc -i$(MSDEV_DIR)/include mxserver.rc

server_install:
	cp $(SERVER_NAME) $(MX_INSTALL_DIR)/sbin
	cp ../scripts/startmxserver.bat $(MX_INSTALL_DIR)/sbin
	cp ../scripts/mx.bat $(MX_INSTALL_DIR)/sbin
	touch $(MX_INSTALL_DIR)/etc/mxserver.dat
	touch $(MX_INSTALL_DIR)/etc/mxserver.acl

#
#---------------------------------------------------
#
AUTOSAVE_NAME	= mxautosave.exe

$(AUTOSAVE_NAME): $(AUTOSAVE_OBJS) mxautosave.res \
		  $(shell echo $(MX_LIBRARY_PATH) | tr \\\\ / )
	link /debug /nologo /out:mxautosave.exe *.obj mxautosave.res \
		/nodefaultlib:libc $(DEBUG_OPTS) \
		$(MX_LIBRARY_PATH) $(WIN32_LIBS)

	# For VC2005 or later, embed the manifest in the executable.

	if test -f $(AUTOSAVE_NAME).manifest; then \
		$(MSMANIFEST_TOOL) -nologo -outputresource:$(AUTOSAVE_NAME)\;1 \
			-manifest $(AUTOSAVE_NAME).manifest $(EXTRA_MANIFESTS) ; \
		rm -f $(AUTOSAVE_NAME).manifest; \
	fi

mxautosave.res: mxautosave.rc
	rc -i$(MSDEV_DIR)/include mxautosave.rc

autosave_install:
	cp $(AUTOSAVE_NAME) $(MX_INSTALL_DIR)/sbin
	cp ../scripts/startmxautosave.bat $(MX_INSTALL_DIR)/sbin
	touch $(MX_INSTALL_DIR)/etc/mxautosave.dat

#
#---------------------------------------------------
#
MXDRIVERINFO_NAME    = mxdriverinfo.exe

$(MXDRIVERINFO_NAME): $(MXDRIVERINFO_OBJS) mxdriverinfo.res \
		  $(shell echo $(MX_LIBRARY_PATH) | tr \\\\ / )
	link /debug /nologo /out:mxdriverinfo.exe mxdriverinfo.obj \
		/nodefaultlib:libc $(DEBUG_OPTS) \
		$(MX_LIBRARY_PATH) $(WIN32_LIBS)

	# For VC2005 or later, embed the manifest in the executable.

	if test -f $(MXDRIVERINFO_NAME).manifest; then \
		$(MSMANIFEST_TOOL) -nologo \
				-outputresource:$(MXDRIVERINFO_NAME)\;1 \
		  -manifest $(MXDRIVERINFO_NAME).manifest $(EXTRA_MANIFESTS) ; \
		rm -f $(MXDRIVERINFO_NAME).manifest; \
	fi

mxdriverinfo.res: mxdriverinfo.rc
	rc -i$(MSDEV_DIR)/include mxdriverinfo.rc

#----

MXMONITOR_NAME    = mxmonitor.exe

$(MXMONITOR_NAME): $(MXMONITOR_OBJS) mxmonitor.res \
		  $(shell echo $(MX_LIBRARY_PATH) | tr \\\\ / )
	link /debug /nologo /out:mxmonitor.exe mxmonitor.obj \
		/nodefaultlib:libc $(DEBUG_OPTS) \
		$(MX_LIBRARY_PATH) $(WIN32_LIBS)

	# For VC2005 or later, embed the manifest in the executable.

	if test -f $(MXMONITOR_NAME).manifest; then \
		$(MSMANIFEST_TOOL) -nologo \
				-outputresource:$(MXMONITOR_NAME)\;1 \
		  -manifest $(MXMONITOR_NAME).manifest $(EXTRA_MANIFESTS) ; \
		rm -f $(MXMONITOR_NAME).manifest; \
	fi

mxmonitor.res: mxmonitor.rc
	rc -i$(MSDEV_DIR)/include mxmonitor.rc

#----

util_install:
	cp $(MXDRIVERINFO_NAME) $(MX_INSTALL_DIR)/bin
	cp $(MXMONITOR_NAME) $(MX_INSTALL_DIR)/bin

